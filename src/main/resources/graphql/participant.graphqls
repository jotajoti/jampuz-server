type Participant {
    id: ID!
    name: String!
    # Pin code is only set if authenticated user is participant itself or an owner on the location
    pinCode: String
    # If not null, means this participant is linked to the Admin user so the admin also can act as participant.
    admin: Admin
    event: Event!
    foundJidCodes: [FoundJidCode!]
}

type FoundJidCode {
    id: ID!
    code: JidCode!
    participant: Participant!
}

input CreateParticipantInput {
    name: String!
    eventId: ID!
}

input RegisterFoundJidCode {
    code: String!
    eventId: ID!
}

extend type Event {
    participants: [Participant!]!
}

extend type Mutation {
    authenticateParticipant(eventId: ID!, name: String!, pinCode: String!): String
    createParticipant(input: CreateParticipantInput!): Participant
    # Participant is taken from authentication
    registerFoundJidCode(input: RegisterFoundJidCode!): FoundJidCode
}

extend type Query {
    # Return null if not authenticated or if authentication is not a participant
    # If eventJidCode is provided it will only return participant if the authenticated
    # participant is associated with the event
    authenticatedParticipant(eventJidCode: String, year: Int): Participant
}

extend type Subscription {
    participants(eventId: ID!): [Participant!]
}

