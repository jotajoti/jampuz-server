type Participant {
    id: ID!
    name: String!
    # If not null, means this participant is linked to the Admin user so the admin also can act as participant.
    admin: Admin
    location: Location!
    foundJidCodes: [FoundJidCode!]
}

type FoundJidCode {
    id: ID!
    code: JidCode!
    participant: Participant!
}

input CreateParticipantInput {
    name: String!
    locationId: ID!
}

input RegisterFoundJidCode {
    code: String!
    locationId: ID!
}

extend type Location {
    participants: [Participant!]
}

extend type Mutation {
    authenticateParticipant(locationId: ID!, name: String!, pinCode: String!): String
    createParticipant(input: CreateParticipantInput!): Participant
    registerFoundJidCode(input: RegisterFoundJidCode!): FoundJidCode
}

extend type Query {
    # Return null if not authenticated or if authentication is not a participant
    authenticatedParticipant: Participant
}

