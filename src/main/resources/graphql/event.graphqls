type Event {
    id: ID!
    code: JidCode!
    year: Int!
    active: Boolean!
    location: Location! @Cost(value: 5)
    # Returns true if event is latest for the location
    isLatest: Boolean! @Cost(value: 5)
    # Return previous year's event
    previous: Event @Cost(value: 5)
    # Return next year's event
    next: Event @Cost(value: 5)
}

input CreateEventInput {
    locationId: ID!
    code: String!
    year: Int!
    active: Boolean = false
}

input UpdateEventInput {
    id: ID!
    code: String
    year: Int
    active: Boolean
}

extend type Location {
    events: [Event!]! @Cost(value: 10)
    latestEvent: Event @Cost(value: 5)
}

extend type Query {
    # If no year is provided the latest event is taken
    # Can be loaded without authentication
    event(code: String!, year: Int): Event @Cost(value: 5)

    # Load specific event by ID.
    # Requires admin authentication
    eventById(eventId: ID!): Event @Cost(value: 5)
}

extend type Mutation {
    createEvent(input: CreateEventInput!): Event
    updateEvent(input: UpdateEventInput!): Event
}

extend type Subscription {
    eventUpdated(eventId: ID!): ID!
}
